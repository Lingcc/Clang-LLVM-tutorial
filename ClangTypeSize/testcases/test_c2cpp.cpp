// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/IRPrintingPasses.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/LegacyPassManager.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("test.ll", getGlobalContext());
 mod->setDataLayout("");
 mod->setTargetTriple("x86_64-unknown-linux-gnu");
 
 // Type Definitions
 ArrayType* ArrayTy_0 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 61);
 
 PointerType* PointerTy_1 = PointerType::get(ArrayTy_0, 0);
 
 std::vector<Type*>FuncTy_2_args;
 FunctionType* FuncTy_2 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_2_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_3 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 PointerType* PointerTy_4 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
 
 PointerType* PointerTy_5 = PointerType::get(IntegerType::get(mod->getContext(), 64), 0);
 
 PointerType* PointerTy_6 = PointerType::get(Type::getFloatTy(mod->getContext()), 0);
 
 PointerType* PointerTy_7 = PointerType::get(Type::getDoubleTy(mod->getContext()), 0);
 
 std::vector<Type*>StructTy_9_fields;
 StructTy_9_fields.push_back(Type::getFloatTy(mod->getContext()));
 StructTy_9_fields.push_back(Type::getFloatTy(mod->getContext()));
 StructType *StructTy_9 = StructType::get(mod->getContext(), StructTy_9_fields, /*isPacked=*/false);
 
 PointerType* PointerTy_8 = PointerType::get(StructTy_9, 0);
 
 std::vector<Type*>StructTy_11_fields;
 StructTy_11_fields.push_back(Type::getDoubleTy(mod->getContext()));
 StructTy_11_fields.push_back(Type::getDoubleTy(mod->getContext()));
 StructType *StructTy_11 = StructType::get(mod->getContext(), StructTy_11_fields, /*isPacked=*/false);
 
 PointerType* PointerTy_10 = PointerType::get(StructTy_11, 0);
 
 std::vector<Type*>StructTy_13_fields;
 StructTy_13_fields.push_back(Type::getX86_FP80Ty(mod->getContext()));
 StructTy_13_fields.push_back(Type::getX86_FP80Ty(mod->getContext()));
 StructType *StructTy_13 = StructType::get(mod->getContext(), StructTy_13_fields, /*isPacked=*/false);
 
 PointerType* PointerTy_12 = PointerType::get(StructTy_13, 0);
 
 VectorType* VectorTy_14 = VectorType::get(Type::getFloatTy(mod->getContext()), 2);
 
 std::vector<Type*>FuncTy_16_args;
 FuncTy_16_args.push_back(Type::getFloatTy(mod->getContext()));
 FuncTy_16_args.push_back(Type::getFloatTy(mod->getContext()));
 FuncTy_16_args.push_back(Type::getFloatTy(mod->getContext()));
 FuncTy_16_args.push_back(Type::getFloatTy(mod->getContext()));
 FunctionType* FuncTy_16 = FunctionType::get(
  /*Result=*/VectorTy_14,
  /*Params=*/FuncTy_16_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_15 = PointerType::get(FuncTy_16, 0);
 
 PointerType* PointerTy_17 = PointerType::get(VectorTy_14, 0);
 
 PointerType* PointerTy_18 = PointerType::get(Type::getX86_FP80Ty(mod->getContext()), 0);
 
 std::vector<Type*>FuncTy_20_args;
 FuncTy_20_args.push_back(PointerTy_4);
 FunctionType* FuncTy_20 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_20_args,
  /*isVarArg=*/true);
 
 PointerType* PointerTy_19 = PointerType::get(FuncTy_20, 0);
 
 
 // Function Declarations
 
 Function* func_main = mod->getFunction("main");
 if (!func_main) {
 func_main = Function::Create(
  /*Type=*/FuncTy_2,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"main", mod); 
 func_main->setCallingConv(CallingConv::C);
 }
 AttributeSet func_main_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_main_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_main->setAttributes(func_main_PAL);
 
 Function* func___mulsc3 = mod->getFunction("__mulsc3");
 if (!func___mulsc3) {
 func___mulsc3 = Function::Create(
  /*Type=*/FuncTy_16,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"__mulsc3", mod); // (external, no body)
 func___mulsc3->setCallingConv(CallingConv::C);
 }
 AttributeSet func___mulsc3_PAL;
 func___mulsc3->setAttributes(func___mulsc3_PAL);
 
 Function* func_printf = mod->getFunction("printf");
 if (!func_printf) {
 func_printf = Function::Create(
  /*Type=*/FuncTy_20,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"printf", mod); // (external, no body)
 func_printf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_printf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_printf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_printf->setAttributes(func_printf_PAL);
 
 // Global Variable Declarations

 
 GlobalVariable* gvar_array__str = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_0,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str");
 gvar_array__str->setAlignment(1);
 
 // Constant Definitions
 Constant *const_array_21 = ConstantDataArray::getString(mod->getContext(), "size of a,b,c,d,e,f,g,h,i,j is%d %d %d %d %d %d %d %d %d %d\x0A", true);
 ConstantInt* const_int32_22 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 ConstantInt* const_int32_23 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
 ConstantInt* const_int8_24 = ConstantInt::get(mod->getContext(), APInt(8, StringRef("2"), 10));
 ConstantInt* const_int32_25 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("15"), 10));
 ConstantInt* const_int32_26 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("61439"), 10));
 ConstantInt* const_int64_27 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("1099511627775"), 10));
 ConstantFP* const_float_28 = ConstantFP::get(mod->getContext(), APFloat(1.120000e+02f));
 ConstantFP* const_double_29 = ConstantFP::get(mod->getContext(), APFloat(3.200000e+01));
 ConstantFP* const_float_30 = ConstantFP::get(mod->getContext(), APFloat(2.000000e+00f));
 ConstantFP* const_float_31 = ConstantFP::get(mod->getContext(), APFloat(3.000000e+00f));
 ConstantInt* const_int1_32 = ConstantInt::get(mod->getContext(), APInt(1, StringRef("0"), 10));
 ConstantFP* const_float_33 = ConstantFP::get(mod->getContext(), APFloat(2.300000e+01f));
 ConstantFP* const_float_34 = ConstantFP::get(mod->getContext(), APFloat(0.000000e+00f));
 ConstantFP* const_float_35 = ConstantFP::get(mod->getContext(), APFloat(1.000000e+00f));
 ConstantFP* const_double_36 = ConstantFP::get(mod->getContext(), APFloat(3.232320e+03));
 ConstantFP* const_float_37 = ConstantFP::get(mod->getContext(), APFloat(3.232300e+04f));
 std::vector<Constant*> const_ptr_38_indices;
 const_ptr_38_indices.push_back(const_int32_23);
 const_ptr_38_indices.push_back(const_int32_23);
 Constant* const_ptr_38 = ConstantExpr::getGetElementPtr(gvar_array__str, const_ptr_38_indices);
 ConstantInt* const_int64_39 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("1"), 10));
 ConstantInt* const_int64_40 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("4"), 10));
 ConstantInt* const_int64_41 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("8"), 10));
 ConstantInt* const_int64_42 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("16"), 10));
 ConstantInt* const_int64_43 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("32"), 10));
 
 // Global Variable Definitions
 gvar_array__str->setInitializer(const_array_21);
 
 // Function Definitions
 
 // Function: main (func_main)
 {
  
  BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func_main,0);
  BasicBlock* label_complex_mul_imag_nan = BasicBlock::Create(mod->getContext(), "complex_mul_imag_nan",func_main,0);
  BasicBlock* label_complex_mul_libcall = BasicBlock::Create(mod->getContext(), "complex_mul_libcall",func_main,0);
  BasicBlock* label_complex_mul_cont = BasicBlock::Create(mod->getContext(), "complex_mul_cont",func_main,0);
  BasicBlock* label_complex_mul_imag_nan4 = BasicBlock::Create(mod->getContext(), "complex_mul_imag_nan4",func_main,0);
  BasicBlock* label_complex_mul_libcall5 = BasicBlock::Create(mod->getContext(), "complex_mul_libcall5",func_main,0);
  BasicBlock* label_complex_mul_cont8 = BasicBlock::Create(mod->getContext(), "complex_mul_cont8",func_main,0);
  
  // Block entry (label_entry)
  AllocaInst* ptr_retval = new AllocaInst(IntegerType::get(mod->getContext(), 32), "retval", label_entry);
  ptr_retval->setAlignment(4);
  AllocaInst* ptr_a = new AllocaInst(IntegerType::get(mod->getContext(), 8), "a", label_entry);
  ptr_a->setAlignment(1);
  AllocaInst* ptr_b = new AllocaInst(IntegerType::get(mod->getContext(), 32), "b", label_entry);
  ptr_b->setAlignment(4);
  AllocaInst* ptr_c = new AllocaInst(IntegerType::get(mod->getContext(), 32), "c", label_entry);
  ptr_c->setAlignment(4);
  AllocaInst* ptr_d = new AllocaInst(IntegerType::get(mod->getContext(), 64), "d", label_entry);
  ptr_d->setAlignment(8);
  AllocaInst* ptr_e = new AllocaInst(Type::getFloatTy(mod->getContext()), "e", label_entry);
  ptr_e->setAlignment(4);
  AllocaInst* ptr_f = new AllocaInst(Type::getDoubleTy(mod->getContext()), "f", label_entry);
  ptr_f->setAlignment(8);
  AllocaInst* ptr_g = new AllocaInst(StructTy_9, "g", label_entry);
  ptr_g->setAlignment(4);
  AllocaInst* ptr_h = new AllocaInst(StructTy_11, "h", label_entry);
  ptr_h->setAlignment(8);
  AllocaInst* ptr_coerce = new AllocaInst(StructTy_9, "coerce", label_entry);
  ptr_coerce->setAlignment(4);
  AllocaInst* ptr_i = new AllocaInst(StructTy_13, "i", label_entry);
  ptr_i->setAlignment(16);
  AllocaInst* ptr_coerce7 = new AllocaInst(StructTy_9, "coerce7", label_entry);
  ptr_coerce7->setAlignment(4);
  AllocaInst* ptr_j = new AllocaInst(StructTy_9, "j", label_entry);
  ptr_j->setAlignment(4);
  StoreInst* void_44 = new StoreInst(const_int32_23, ptr_retval, false, label_entry);
  StoreInst* void_45 = new StoreInst(const_int8_24, ptr_a, false, label_entry);
  void_45->setAlignment(1);
  StoreInst* void_46 = new StoreInst(const_int32_25, ptr_b, false, label_entry);
  void_46->setAlignment(4);
  StoreInst* void_47 = new StoreInst(const_int32_26, ptr_c, false, label_entry);
  void_47->setAlignment(4);
  StoreInst* void_48 = new StoreInst(const_int64_27, ptr_d, false, label_entry);
  void_48->setAlignment(8);
  StoreInst* void_49 = new StoreInst(const_float_28, ptr_e, false, label_entry);
  void_49->setAlignment(4);
  StoreInst* void_50 = new StoreInst(const_double_29, ptr_f, false, label_entry);
  void_50->setAlignment(8);
  std::vector<Value*> ptr_real_indices;
  ptr_real_indices.push_back(const_int32_23);
  ptr_real_indices.push_back(const_int32_23);
  Instruction* ptr_real = GetElementPtrInst::Create(ptr_g, ptr_real_indices, "real", label_entry);
  std::vector<Value*> ptr_imag_indices;
  ptr_imag_indices.push_back(const_int32_23);
  ptr_imag_indices.push_back(const_int32_22);
  Instruction* ptr_imag = GetElementPtrInst::Create(ptr_g, ptr_imag_indices, "imag", label_entry);
  StoreInst* void_51 = new StoreInst(const_float_30, ptr_real, false, label_entry);
  void_51->setAlignment(4);
  StoreInst* void_52 = new StoreInst(const_float_31, ptr_imag, false, label_entry);
  void_52->setAlignment(4);
  BranchInst::Create(label_complex_mul_imag_nan, label_complex_mul_cont, const_int1_32, label_entry);
  
  // Block complex_mul_imag_nan (label_complex_mul_imag_nan)
  BranchInst::Create(label_complex_mul_libcall, label_complex_mul_cont, const_int1_32, label_complex_mul_imag_nan);
  
  // Block complex_mul_libcall (label_complex_mul_libcall)
  std::vector<Value*> packed_call_params;
  packed_call_params.push_back(const_float_33);
  packed_call_params.push_back(const_float_34);
  packed_call_params.push_back(const_float_34);
  packed_call_params.push_back(const_float_35);
  CallInst* packed_call = CallInst::Create(func___mulsc3, packed_call_params, "call", label_complex_mul_libcall);
  packed_call->setCallingConv(CallingConv::C);
  packed_call->setTailCall(false);
  AttributeSet packed_call_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   packed_call_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  packed_call->setAttributes(packed_call_PAL);
  
  CastInst* ptr_55 = new BitCastInst(ptr_coerce, PointerTy_17, "", label_complex_mul_libcall);
  StoreInst* void_56 = new StoreInst(packed_call, ptr_55, false, label_complex_mul_libcall);
  void_56->setAlignment(1);
  std::vector<Value*> ptr_coerce_realp_indices;
  ptr_coerce_realp_indices.push_back(const_int32_23);
  ptr_coerce_realp_indices.push_back(const_int32_23);
  Instruction* ptr_coerce_realp = GetElementPtrInst::Create(ptr_coerce, ptr_coerce_realp_indices, "coerce.realp", label_complex_mul_libcall);
  LoadInst* float_coerce_real = new LoadInst(ptr_coerce_realp, "coerce.real", false, label_complex_mul_libcall);
  float_coerce_real->setAlignment(4);
  std::vector<Value*> ptr_coerce_imagp_indices;
  ptr_coerce_imagp_indices.push_back(const_int32_23);
  ptr_coerce_imagp_indices.push_back(const_int32_22);
  Instruction* ptr_coerce_imagp = GetElementPtrInst::Create(ptr_coerce, ptr_coerce_imagp_indices, "coerce.imagp", label_complex_mul_libcall);
  LoadInst* float_coerce_imag = new LoadInst(ptr_coerce_imagp, "coerce.imag", false, label_complex_mul_libcall);
  float_coerce_imag->setAlignment(4);
  BranchInst::Create(label_complex_mul_cont, label_complex_mul_libcall);
  
  // Block complex_mul_cont (label_complex_mul_cont)
  PHINode* float_real_mul_phi = PHINode::Create(Type::getFloatTy(mod->getContext()), 3, "real_mul_phi", label_complex_mul_cont);
  float_real_mul_phi->addIncoming(const_float_34, label_entry);
  float_real_mul_phi->addIncoming(const_float_34, label_complex_mul_imag_nan);
  float_real_mul_phi->addIncoming(float_coerce_real, label_complex_mul_libcall);
  
  PHINode* float_imag_mul_phi = PHINode::Create(Type::getFloatTy(mod->getContext()), 3, "imag_mul_phi", label_complex_mul_cont);
  float_imag_mul_phi->addIncoming(const_float_33, label_entry);
  float_imag_mul_phi->addIncoming(const_float_33, label_complex_mul_imag_nan);
  float_imag_mul_phi->addIncoming(float_coerce_imag, label_complex_mul_libcall);
  
  CastInst* double_conv = new FPExtInst(float_real_mul_phi, Type::getDoubleTy(mod->getContext()), "conv", label_complex_mul_cont);
  CastInst* double_conv1 = new FPExtInst(float_imag_mul_phi, Type::getDoubleTy(mod->getContext()), "conv1", label_complex_mul_cont);
  BinaryOperator* double_add_r = BinaryOperator::Create(Instruction::FAdd, const_double_36, double_conv, "add.r", label_complex_mul_cont);
  std::vector<Value*> ptr_real2_indices;
  ptr_real2_indices.push_back(const_int32_23);
  ptr_real2_indices.push_back(const_int32_23);
  Instruction* ptr_real2 = GetElementPtrInst::Create(ptr_h, ptr_real2_indices, "real2", label_complex_mul_cont);
  std::vector<Value*> ptr_imag3_indices;
  ptr_imag3_indices.push_back(const_int32_23);
  ptr_imag3_indices.push_back(const_int32_22);
  Instruction* ptr_imag3 = GetElementPtrInst::Create(ptr_h, ptr_imag3_indices, "imag3", label_complex_mul_cont);
  StoreInst* void_58 = new StoreInst(double_add_r, ptr_real2, false, label_complex_mul_cont);
  void_58->setAlignment(8);
  StoreInst* void_59 = new StoreInst(double_conv1, ptr_imag3, false, label_complex_mul_cont);
  void_59->setAlignment(8);
  BranchInst::Create(label_complex_mul_imag_nan4, label_complex_mul_cont8, const_int1_32, label_complex_mul_cont);
  
  // Block complex_mul_imag_nan4 (label_complex_mul_imag_nan4)
  BranchInst::Create(label_complex_mul_libcall5, label_complex_mul_cont8, const_int1_32, label_complex_mul_imag_nan4);
  
  // Block complex_mul_libcall5 (label_complex_mul_libcall5)
  std::vector<Value*> packed_call6_params;
  packed_call6_params.push_back(const_float_34);
  packed_call6_params.push_back(const_float_34);
  packed_call6_params.push_back(const_float_34);
  packed_call6_params.push_back(const_float_35);
  CallInst* packed_call6 = CallInst::Create(func___mulsc3, packed_call6_params, "call6", label_complex_mul_libcall5);
  packed_call6->setCallingConv(CallingConv::C);
  packed_call6->setTailCall(false);
  AttributeSet packed_call6_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   packed_call6_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  packed_call6->setAttributes(packed_call6_PAL);
  
  CastInst* ptr_62 = new BitCastInst(ptr_coerce7, PointerTy_17, "", label_complex_mul_libcall5);
  StoreInst* void_63 = new StoreInst(packed_call6, ptr_62, false, label_complex_mul_libcall5);
  void_63->setAlignment(1);
  std::vector<Value*> ptr_coerce7_realp_indices;
  ptr_coerce7_realp_indices.push_back(const_int32_23);
  ptr_coerce7_realp_indices.push_back(const_int32_23);
  Instruction* ptr_coerce7_realp = GetElementPtrInst::Create(ptr_coerce7, ptr_coerce7_realp_indices, "coerce7.realp", label_complex_mul_libcall5);
  LoadInst* float_coerce7_real = new LoadInst(ptr_coerce7_realp, "coerce7.real", false, label_complex_mul_libcall5);
  float_coerce7_real->setAlignment(4);
  std::vector<Value*> ptr_coerce7_imagp_indices;
  ptr_coerce7_imagp_indices.push_back(const_int32_23);
  ptr_coerce7_imagp_indices.push_back(const_int32_22);
  Instruction* ptr_coerce7_imagp = GetElementPtrInst::Create(ptr_coerce7, ptr_coerce7_imagp_indices, "coerce7.imagp", label_complex_mul_libcall5);
  LoadInst* float_coerce7_imag = new LoadInst(ptr_coerce7_imagp, "coerce7.imag", false, label_complex_mul_libcall5);
  float_coerce7_imag->setAlignment(4);
  BranchInst::Create(label_complex_mul_cont8, label_complex_mul_libcall5);
  
  // Block complex_mul_cont8 (label_complex_mul_cont8)
  PHINode* float_real_mul_phi9 = PHINode::Create(Type::getFloatTy(mod->getContext()), 3, "real_mul_phi9", label_complex_mul_cont8);
  float_real_mul_phi9->addIncoming(const_float_34, label_complex_mul_cont);
  float_real_mul_phi9->addIncoming(const_float_34, label_complex_mul_imag_nan4);
  float_real_mul_phi9->addIncoming(float_coerce7_real, label_complex_mul_libcall5);
  
  PHINode* float_imag_mul_phi10 = PHINode::Create(Type::getFloatTy(mod->getContext()), 3, "imag_mul_phi10", label_complex_mul_cont8);
  float_imag_mul_phi10->addIncoming(const_float_34, label_complex_mul_cont);
  float_imag_mul_phi10->addIncoming(const_float_34, label_complex_mul_imag_nan4);
  float_imag_mul_phi10->addIncoming(float_coerce7_imag, label_complex_mul_libcall5);
  
  BinaryOperator* float_add_r11 = BinaryOperator::Create(Instruction::FAdd, const_float_37, float_real_mul_phi9, "add.r11", label_complex_mul_cont8);
  BinaryOperator* float_add_i = BinaryOperator::Create(Instruction::FAdd, const_float_34, float_imag_mul_phi10, "add.i", label_complex_mul_cont8);
  CastInst* other_conv12 = new FPExtInst(float_add_r11, Type::getX86_FP80Ty(mod->getContext()), "conv12", label_complex_mul_cont8);
  CastInst* other_conv13 = new FPExtInst(float_add_i, Type::getX86_FP80Ty(mod->getContext()), "conv13", label_complex_mul_cont8);
  std::vector<Value*> ptr_real14_indices;
  ptr_real14_indices.push_back(const_int32_23);
  ptr_real14_indices.push_back(const_int32_23);
  Instruction* ptr_real14 = GetElementPtrInst::Create(ptr_i, ptr_real14_indices, "real14", label_complex_mul_cont8);
  std::vector<Value*> ptr_imag15_indices;
  ptr_imag15_indices.push_back(const_int32_23);
  ptr_imag15_indices.push_back(const_int32_22);
  Instruction* ptr_imag15 = GetElementPtrInst::Create(ptr_i, ptr_imag15_indices, "imag15", label_complex_mul_cont8);
  StoreInst* void_65 = new StoreInst(other_conv12, ptr_real14, false, label_complex_mul_cont8);
  void_65->setAlignment(16);
  StoreInst* void_66 = new StoreInst(other_conv13, ptr_imag15, false, label_complex_mul_cont8);
  void_66->setAlignment(16);
  std::vector<Value*> ptr_real16_indices;
  ptr_real16_indices.push_back(const_int32_23);
  ptr_real16_indices.push_back(const_int32_23);
  Instruction* ptr_real16 = GetElementPtrInst::Create(ptr_j, ptr_real16_indices, "real16", label_complex_mul_cont8);
  std::vector<Value*> ptr_imag17_indices;
  ptr_imag17_indices.push_back(const_int32_23);
  ptr_imag17_indices.push_back(const_int32_22);
  Instruction* ptr_imag17 = GetElementPtrInst::Create(ptr_j, ptr_imag17_indices, "imag17", label_complex_mul_cont8);
  StoreInst* void_67 = new StoreInst(const_float_34, ptr_real16, false, label_complex_mul_cont8);
  void_67->setAlignment(4);
  StoreInst* void_68 = new StoreInst(const_float_31, ptr_imag17, false, label_complex_mul_cont8);
  void_68->setAlignment(4);
  std::vector<Value*> int32_call18_params;
  int32_call18_params.push_back(const_ptr_38);
  int32_call18_params.push_back(const_int64_39);
  int32_call18_params.push_back(const_int64_40);
  int32_call18_params.push_back(const_int64_40);
  int32_call18_params.push_back(const_int64_41);
  int32_call18_params.push_back(const_int64_40);
  int32_call18_params.push_back(const_int64_41);
  int32_call18_params.push_back(const_int64_41);
  int32_call18_params.push_back(const_int64_42);
  int32_call18_params.push_back(const_int64_43);
  int32_call18_params.push_back(const_int64_41);
  CallInst* int32_call18 = CallInst::Create(func_printf, int32_call18_params, "call18", label_complex_mul_cont8);
  int32_call18->setCallingConv(CallingConv::C);
  int32_call18->setTailCall(false);
  AttributeSet int32_call18_PAL;
  int32_call18->setAttributes(int32_call18_PAL);
  
  ReturnInst::Create(mod->getContext(), const_int32_23, label_complex_mul_cont8);
  
 }
 
 return mod;
}
